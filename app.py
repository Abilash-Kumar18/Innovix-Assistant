import streamlit as st
import json
import os
from datetime import datetime
import openai
from deep_translator import GoogleTranslator
from streamlit_folium import st_folium
import folium
import requests

# ========== CONFIG ==========
openai.api_key = st.secrets["OPENAI_API_KEY"]
weather_api_key = st.secrets["OPENWEATHER_API_KEY"]

PROFILE_FILE = "farmer_profile.json"
LOG_FILE = "activity_logs.json"

# ========== HELPER FUNCTIONS ==========
def load_json(file, default):
    if os.path.exists(file):
        with open(file, "r", encoding="utf-8") as f:
            return json.load(f)
    return default

def save_json(file, data):
    with open(file, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_weather(lat, lon, lang="en"):
    url = f"https://api.openweathermap.org/data/2.5/weather?lat={lat}&lon={lon}&appid={weather_api_key}&units=metric&lang={lang}"
    try:
        res = requests.get(url).json()
        if "main" in res:
            temp = res["main"]["temp"]
            desc = res["weather"][0]["description"]
            humidity = res["main"]["humidity"]
            return f"üå°Ô∏è {temp}¬∞C | {desc.capitalize()} | üíß Humidity: {humidity}%"
        else:
            return "‚ö†Ô∏è Weather data unavailable"
    except Exception as e:
        return f"‚ö†Ô∏è Error fetching weather: {e}"

# ========== STREAMLIT APP ==========
st.set_page_config(page_title="Krishi Sakhi - Farming Assistant", layout="wide")

# Language Toggle
lang = st.sidebar.radio("üåê Language / ‡¥≠‡¥æ‡¥∑", ("English", "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç"))
is_ml = lang == "‡¥Æ‡¥≤‡¥Ø‡¥æ‡¥≥‡¥Ç"
weather_lang = "ml" if is_ml else "en"

# ---- Title ----
st.title("üåæ ‡¥ï‡µÉ‡¥∑‡¥ø ‡¥∏‡¥ñ‡¥ø ‚Äì ‡¥ï‡µº‡¥∑‡¥ï‡¥∞‡µÅ‡¥ü‡µÜ AI ‡¥∏‡¥π‡¥æ‡¥Ø‡¥Ç" if is_ml else "üåæ Krishi Sakhi ‚Äì AI-Powered Farming Assistant")

# Load saved data
profile = load_json(PROFILE_FILE, {})
logs = load_json(LOG_FILE, [])

# ---- Farmer Profile ----
st.header("üë®‚Äçüåæ ‡¥ï‡µº‡¥∑‡¥ï‡¥®‡µç‡¥±‡µÜ ‡¥µ‡¥ø‡¥µ‡¥∞‡¥ô‡µç‡¥ô‡µæ" if is_ml else "üë®‚Äçüåæ Farmer Profile")
with st.form("profile_form"):
    name = st.text_input("‡¥™‡µá‡¥∞‡µç" if is_ml else "Name", profile.get("name", ""))
    crop = st.selectbox("‡¥™‡µç‡¥∞‡¥ß‡¥æ‡¥® ‡¥µ‡¥ø‡¥≥" if is_ml else "Main Crop", ["Rice", "Coconut", "Banana", "Vegetables", "Rubber", "Other"])
    soil = st.selectbox("‡¥Æ‡¥£‡µç‡¥£‡¥ø‡¥®‡µç‡¥±‡µÜ ‡¥§‡¥∞‡¥Ç" if is_ml else "Soil Type", ["Sandy", "Clay", "Loamy", "Laterite", "Alluvial"])
    land = st.text_input("‡¥≠‡µÇ‡¥Æ‡¥ø‡¥Ø‡µÅ‡¥ü‡µÜ ‡¥µ‡¥≤‡µÅ‡¥™‡µç‡¥™‡¥Ç (‡¥è‡¥ï‡µç‡¥ï‡µº)" if is_ml else "Land Size (acres)", profile.get("land", ""))

    submitted = st.form_submit_button("‡¥∏‡µá‡¥µ‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï" if is_ml else "Save Profile")
    if submitted:
        profile = {"name": name, "crop": crop, "soil": soil, "land": land}
        save_json(PROFILE_FILE, profile)
        st.success("‚úÖ ‡¥∏‡¥Ç‡¥∞‡¥ï‡µç‡¥∑‡¥ø‡¥ö‡µç‡¥ö‡µÅ!" if is_ml else "‚úÖ Profile saved!")

if profile:
    st.subheader("üìå ‡¥µ‡¥ø‡¥∂‡¥¶‡¥æ‡¥Ç‡¥∂‡¥ô‡µç‡¥ô‡µæ" if is_ml else "üìå Farmer Details")
    st.json(profile)

# ---- Location Map ----
st.header("üìç ‡¥∏‡µç‡¥•‡¥≤‡¥Ç / Location")
st.write("üó∫Ô∏è ‡¥®‡¥ø‡¥ô‡µç‡¥ô‡¥≥‡µÅ‡¥ü‡µÜ ‡¥∏‡µç‡¥•‡¥≤‡¥§‡µç‡¥§‡µç ‡¥ï‡µç‡¥≤‡¥ø‡¥ï‡µç‡¥ï‡µç ‡¥ö‡µÜ‡¥Ø‡µç‡¥Ø‡µÅ‡¥ï" if is_ml else "üó∫Ô∏è Click on the map to mark your farm location")

m = folium.Map(location=[10.85, 76.27], zoom_start=7)  # Kerala default center
if "location" in profile and "lat" in profile["location"]:
    folium.Marker(
        [profile["location"]["lat"], profile["location"]["lon"]],
        popup="Your Farm",
        icon=folium.Icon(color="green")
    ).add_to(m)

map_data = st_folium(m, height=400, width=700)

if map_data and map_data["last_clicked"]:
    lat, lon = map_data["last_clicked"]["lat"], map_data["last_clicked"]["lng"]
    profile["location"] = {"lat": lat, "lon": lon}
    save_json(PROFILE_FILE, profile)
    st.success(f"üìç Location saved: {lat:.4f}, {lon:.4f}")

if "location" in profile:
    st.map([{"lat": profile["location"]["lat"], "lon": profile["location"]["lon"]}])

    # ---- Weather Section ----
    st.header("üå¶Ô∏è ‡¥ï‡¥æ‡¥≤‡¥æ‡¥µ‡¥∏‡µç‡¥•" if is_ml else "üå¶Ô∏è Weather Update")
    weather_report = get_weather(profile["location"]["lat"], profile["location"]["lon"], lang=weather_lang)
    st.info(weather_report)
